{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "2906892014954666053"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "EastUS2",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "azureOpenAILocation": {
      "type": "string",
      "defaultValue": "japaneast",
      "metadata": {
        "description": "Location for OpenAI resources."
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "macaeo",
      "metadata": {
        "description": "A prefix to add to the start of all resource names. Note: A \"unique\" suffix will also be added"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all deployed resources"
      }
    },
    "resourceSize": {
      "type": "object",
      "properties": {
        "gpt4oCapacity": {
          "type": "int"
        },
        "containerAppSize": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string"
            },
            "memory": {
              "type": "string"
            },
            "minReplicas": {
              "type": "int"
            },
            "maxReplicas": {
              "type": "int"
            }
          }
        }
      },
      "defaultValue": {
        "gpt4oCapacity": 5,
        "containerAppSize": {
          "cpu": "2.0",
          "memory": "4.0Gi",
          "minReplicas": 1,
          "maxReplicas": 1
        }
      },
      "metadata": {
        "description": "The size of the resources to deploy, defaults to a mini size"
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 1
    }
  },
  "variables": {
    "modelVersion": "2024-08-06",
    "aiServicesName": "[format('{0}-aiservices', parameters('prefix'))]",
    "deploymentType": "GlobalStandard",
    "gptModelVersion": "gpt-4o",
    "appVersion": "latest",
    "resgistryName": "biabcontainerreg",
    "dockerRegistryUrl": "[format('https://{0}.azurecr.io', variables('resgistryName'))]",
    "backendDockerImageURL": "[format('{0}.azurecr.io/macaebackend:{1}', variables('resgistryName'), variables('appVersion'))]",
    "frontendDockerImageURL": "[format('{0}.azurecr.io/macaefrontend:{1}', variables('resgistryName'), variables('appVersion'))]",
    "uniqueNameFormat": "[format('{0}-{{0}}-{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('prefix')))]",
    "aoaiApiVersion": "2024-08-01-preview",
    "aiModelDeployments": [
      {
        "name": "[variables('gptModelVersion')]",
        "model": "[variables('gptModelVersion')]",
        "version": "[variables('modelVersion')]",
        "sku": {
          "name": "[variables('deploymentType')]",
          "capacity": "[parameters('capacity')]"
        },
        "raiPolicyName": "Microsoft.Default"
      }
    ]
  },
  "resources": {
    "cosmos::autogenDb::memoryContainer": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}/{2}', format(variables('uniqueNameFormat'), 'cosmos'), 'autogen', 'memory')]",
      "properties": {
        "resource": {
          "id": "memory",
          "partitionKey": {
            "kind": "Hash",
            "version": 2,
            "paths": [
              "/session_id"
            ]
          }
        }
      },
      "dependsOn": [
        "cosmos::autogenDb"
      ]
    },
    "cosmos::contributorRoleDefinition": {
      "existing": true,
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')]",
      "dependsOn": [
        "cosmos"
      ]
    },
    "cosmos::autogenDb": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), 'autogen')]",
      "properties": {
        "resource": {
          "id": "autogen",
          "createMode": "Default"
        }
      },
      "dependsOn": [
        "cosmos"
      ]
    },
    "containerAppEnv::aspireDashboard": {
      "type": "Microsoft.App/managedEnvironments/dotNetComponents",
      "apiVersion": "2024-02-02-preview",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'containerapp'), 'aspire-dashboard')]",
      "properties": {
        "componentType": "AspireDashboard"
      },
      "dependsOn": [
        "containerAppEnv"
      ]
    },
    "logAnalytics": {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[format(variables('uniqueNameFormat'), 'logs')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "retentionInDays": 30,
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    "appInsights": {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[format(variables('uniqueNameFormat'), 'appins')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format(variables('uniqueNameFormat'), 'logs'))]"
      },
      "dependsOn": [
        "logAnalytics"
      ]
    },
    "aiServices": {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-04-01-preview",
      "name": "[variables('aiServicesName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S0"
      },
      "kind": "AIServices",
      "properties": {
        "customSubDomainName": "[variables('aiServicesName')]",
        "apiProperties": {
          "statisticsEnabled": false
        }
      }
    },
    "aiServicesDeployments": {
      "copy": {
        "name": "aiServicesDeployments",
        "count": "[length(variables('aiModelDeployments'))]"
      },
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiModelDeployments')[copyIndex()].name)]",
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "[variables('aiModelDeployments')[copyIndex()].model]",
          "version": "[variables('aiModelDeployments')[copyIndex()].version]"
        },
        "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
      },
      "sku": {
        "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
        "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
      },
      "dependsOn": [
        "aiServices"
      ]
    },
    "aoaiUserRoleDefinition": {
      "existing": true,
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-05-01-preview",
      "name": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
    },
    "acaAoaiRoleAssignment": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiServicesName'))]",
      "name": "[guid(resourceId('Microsoft.App/containerApps', format('{0}-backend', parameters('prefix'))), resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
      "properties": {
        "principalId": "[reference('containerApp', '2024-03-01', 'full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "aiServices",
        "containerApp"
      ]
    },
    "cosmos": {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2024-05-15",
      "name": "[format(variables('uniqueNameFormat'), 'cosmos')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableFreeTier": false,
        "locations": [
          {
            "failoverPriority": 0,
            "locationName": "[parameters('location')]"
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ]
      }
    },
    "pullIdentity": {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-07-31-preview",
      "name": "[format(variables('uniqueNameFormat'), 'containerapp-pull')]",
      "location": "[parameters('location')]"
    },
    "containerAppEnv": {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2024-03-01",
      "name": "[format(variables('uniqueNameFormat'), 'containerapp')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "daprAIConnectionString": "[reference('appInsights').ConnectionString]",
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference('logAnalytics').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format(variables('uniqueNameFormat'), 'logs')), '2023-09-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "appInsights",
        "logAnalytics"
      ]
    },
    "acaCosomsRoleAssignment": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), guid(resourceId('Microsoft.App/containerApps', format('{0}-backend', parameters('prefix'))), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')))]",
      "properties": {
        "principalId": "[reference('containerApp', '2024-03-01', 'full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')]",
        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', format(variables('uniqueNameFormat'), 'cosmos'))]"
      },
      "dependsOn": [
        "containerApp",
        "cosmos"
      ]
    },
    "containerApp": {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}-backend', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "SystemAssigned, UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull')))]": {}
        }
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format(variables('uniqueNameFormat'), 'containerapp'))]",
        "configuration": {
          "ingress": {
            "targetPort": 8000,
            "external": true,
            "corsPolicy": {
              "allowedOrigins": [
                "[format('https://{0}.azurewebsites.net', format(variables('uniqueNameFormat'), 'frontend'))]",
                "[format('http://{0}.azurewebsites.net', format(variables('uniqueNameFormat'), 'frontend'))]"
              ]
            }
          },
          "activeRevisionsMode": "Single"
        },
        "template": {
          "scale": {
            "minReplicas": "[parameters('resourceSize').containerAppSize.minReplicas]",
            "maxReplicas": "[parameters('resourceSize').containerAppSize.maxReplicas]",
            "rules": [
              {
                "name": "http-scaler",
                "http": {
                  "metadata": {
                    "concurrentRequests": "100"
                  }
                }
              }
            ]
          },
          "containers": [
            {
              "name": "backend",
              "image": "[variables('backendDockerImageURL')]",
              "resources": {
                "cpu": "[json(parameters('resourceSize').containerAppSize.cpu)]",
                "memory": "[parameters('resourceSize').containerAppSize.memory]"
              },
              "env": [
                {
                  "name": "COSMOSDB_ENDPOINT",
                  "value": "[reference('cosmos').documentEndpoint]"
                },
                {
                  "name": "COSMOSDB_DATABASE",
                  "value": "autogen"
                },
                {
                  "name": "COSMOSDB_CONTAINER",
                  "value": "memory"
                },
                {
                  "name": "AZURE_OPENAI_ENDPOINT",
                  "value": "[reference('aiServices').endpoint]"
                },
                {
                  "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
                  "value": "[variables('gptModelVersion')]"
                },
                {
                  "name": "AZURE_OPENAI_API_VERSION",
                  "value": "[variables('aoaiApiVersion')]"
                },
                {
                  "name": "FRONTEND_SITE_NAME",
                  "value": "[format('https://{0}.azurewebsites.net', format(variables('uniqueNameFormat'), 'frontend'))]"
                },
                {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "value": "[reference('appInsights').ConnectionString]"
                }
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "aiServices",
        "appInsights",
        "containerAppEnv",
        "cosmos",
        "cosmos::autogenDb",
        "cosmos::autogenDb::memoryContainer",
        "pullIdentity"
      ],
      "metadata": {
        "description": ""
      }
    },
    "frontendAppServicePlan": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[format(variables('uniqueNameFormat'), 'frontend-plan')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "P1v2",
        "capacity": 1,
        "tier": "PremiumV2"
      },
      "properties": {
        "reserved": true
      },
      "kind": "linux"
    },
    "frontendAppService": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[format(variables('uniqueNameFormat'), 'frontend')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format(variables('uniqueNameFormat'), 'frontend-plan'))]",
        "reserved": true,
        "siteConfig": {
          "linuxFxVersion": "[format('DOCKER|{0}', variables('frontendDockerImageURL'))]",
          "appSettings": [
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[variables('dockerRegistryUrl')]"
            },
            {
              "name": "WEBSITES_PORT",
              "value": "3000"
            },
            {
              "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
              "value": "1800"
            },
            {
              "name": "BACKEND_API_URL",
              "value": "[format('https://{0}', reference('containerApp').configuration.ingress.fqdn)]"
            }
          ]
        }
      },
      "identity": {
        "type": "SystemAssigned,UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull')))]": {}
        }
      },
      "dependsOn": [
        "containerApp",
        "frontendAppServicePlan",
        "pullIdentity"
      ]
    },
    "kvault": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('prefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('location')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference('managedIdentityModule').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "10664495342911727649"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            }
          },
          "variables": {
            "keyvaultName": "[format('{0}-kv', parameters('solutionName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[variables('keyvaultName')]",
              "location": "[parameters('solutionLocation')]",
              "properties": {
                "createMode": "default",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": false,
                "enableRbacAuthorization": true,
                "enablePurgeProtection": true,
                "publicNetworkAccess": "enabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyvaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "managedIdentityModule"
      ]
    },
    "aifoundry": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('prefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('azureOpenAILocation')]"
          },
          "keyVaultName": {
            "value": "[reference('kvault').outputs.keyvaultName.value]"
          },
          "gptModelName": {
            "value": "[variables('gptModelVersion')]"
          },
          "gptModelVersion": {
            "value": "[variables('gptModelVersion')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference('managedIdentityModule').outputs.managedIdentityOutput.value.objectId]"
          },
          "aiServicesEndpoint": {
            "value": "[reference('aiServices').endpoint]"
          },
          "aiServicesKey": {
            "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2024-04-01-preview').key1]"
          },
          "aiServicesId": {
            "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "12550713338937452696"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            },
            "gptModelVersion": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "aiServicesEndpoint": {
              "type": "string"
            },
            "aiServicesKey": {
              "type": "string"
            },
            "aiServicesId": {
              "type": "string"
            }
          },
          "variables": {
            "storageName": "[format('{0}hubstorage', parameters('solutionName'))]",
            "storageSkuName": "Standard_LRS",
            "aiServicesName": "[format('{0}-aiservices', parameters('solutionName'))]",
            "workspaceName": "[format('{0}-workspace', parameters('solutionName'))]",
            "keyvaultName": "[format('{0}-kv', parameters('solutionName'))]",
            "location": "[parameters('solutionLocation')]",
            "aiHubName": "[format('{0}-aihub', parameters('solutionName'))]",
            "aiHubFriendlyName": "[variables('aiHubName')]",
            "aiHubDescription": "AI Hub for KM template",
            "aiProjectName": "[format('{0}-aiproject', parameters('solutionName'))]",
            "aiProjectFriendlyName": "[variables('aiProjectName')]",
            "aiSearchName": "[format('{0}-search', parameters('solutionName'))]",
            "storageNameCleaned": "[replace(variables('storageName'), '-', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-07-01-preview",
              "name": "[format('{0}/{1}', variables('aiHubName'), format('{0}-connection-AzureOpenAI', variables('aiHubName')))]",
              "properties": {
                "category": "AIServices",
                "target": "[parameters('aiServicesEndpoint')]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[parameters('aiServicesKey')]"
                },
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[parameters('aiServicesId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": {},
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[variables('storageNameCleaned')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "[variables('storageSkuName')]"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowSharedKeyAccess": false,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageNameCleaned'))]",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-08-01-preview",
              "name": "[variables('aiHubName')]",
              "location": "[variables('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[variables('aiHubFriendlyName')]",
                "description": "[variables('aiHubDescription')]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              },
              "kind": "hub",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-01-01-preview",
              "name": "[variables('aiProjectName')]",
              "location": "[variables('location')]",
              "kind": "Project",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[variables('aiProjectFriendlyName')]",
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'TENANT-ID')]",
              "properties": {
                "value": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-ENDPOINT')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-INFERENCE-KEY')]",
              "properties": {
                "value": ""
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-KEY')]",
              "properties": {
                "value": "[parameters('aiServicesKey')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPEN-AI-DEPLOYMENT-MODEL')]",
              "properties": {
                "value": "[parameters('gptModelName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('gptModelVersion')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[parameters('aiServicesEndpoint')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-AI-PROJECT-CONN-STRING')]",
              "properties": {
                "value": "[format('{0};{1};{2};{3}', split(reference(resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiProjectName')), '2024-01-01-preview').discoveryUrl, '/')[2], subscription().subscriptionId, resourceGroup().name, variables('aiProjectName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiProjectName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-CU-VERSION')]",
              "properties": {
                "value": "?api-version=2024-12-01-preview"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[parameters('aiServicesEndpoint')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-KEY')]",
              "properties": {
                "value": "[parameters('aiServicesKey')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[variables('aiServicesName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageNameCleaned')]"
            },
            "logAnalyticsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
            }
          }
        }
      },
      "dependsOn": [
        "aiServices",
        "kvault",
        "managedIdentityModule"
      ]
    },
    "managedIdentityModule": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('prefix')]"
          },
          "managedIdentityId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull'))]"
          },
          "managedIdentityPropPrin": {
            "value": "[reference('pullIdentity').principalId]"
          },
          "managedIdentityLocation": {
            "value": "[reference('pullIdentity', '2023-07-31-preview', 'full').location]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "11364190519186458619"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "managedIdentityPropPrin": {
              "type": "string"
            },
            "managedIdentityLocation": {
              "type": "string"
            },
            "miName": {
              "type": "string",
              "defaultValue": "[format('{0}-managed-identity', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityId'), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityPropPrin')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[parameters('managedIdentityId')]",
                "objectId": "[parameters('managedIdentityPropPrin')]",
                "resourceId": "[parameters('managedIdentityId')]",
                "location": "[parameters('managedIdentityLocation')]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityId": {
              "type": "string",
              "value": "[parameters('managedIdentityId')]"
            }
          }
        }
      },
      "dependsOn": [
        "pullIdentity"
      ]
    },
    "deploymentScriptCLI": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploymentScriptCLI",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "AzureCLI"
          },
          "name": {
            "value": "rdsmin001"
          },
          "azCliVersion": {
            "value": "2.69.0"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference('managedIdentityModule').outputs.managedIdentityId.value]"
              ]
            }
          },
          "scriptContent": {
            "value": "[format('az cosmosdb sql role assignment create --resource-group \"{0}\" --account-name \"{1}\" --role-definition-id \"{2}\" --scope \"{3}\" --principal-id \"{4}\"', resourceGroup().name, format(variables('uniqueNameFormat'), 'cosmos'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002'), resourceId('Microsoft.DocumentDB/databaseAccounts', format(variables('uniqueNameFormat'), 'cosmos')), reference('containerApp', '2024-03-01', 'full').identity.principalId)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "8965217851411422458"
            },
            "name": "Deployment Scripts",
            "description": "This module deploys Deployment Scripts.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "environmentVariableType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the environment variable."
                  }
                },
                "secureValue": {
                  "type": "securestring",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The value of the secure environment variable. Required if `value` is null."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The value of the environment variable. Required if `secureValue` is null."
                  }
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "managedIdentityOnlyUserAssignedType": {
              "type": "object",
              "properties": {
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 90,
              "metadata": {
                "description": "Required. Name of the Deployment Script."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "AzureCLI",
                "AzurePowerShell"
              ],
              "metadata": {
                "description": "Required. Specifies the Kind of the Deployment Script."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "azPowerShellVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure PowerShell module version to be used. See a list of supported Azure PowerShell versions: https://mcr.microsoft.com/v2/azuredeploymentscripts-powershell/tags/list."
              }
            },
            "azCliVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure CLI module version to be used. See a list of supported Azure CLI versions: https://mcr.microsoft.com/v2/azure-cli/tags/list."
              }
            },
            "scriptContent": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
              }
            },
            "primaryScriptUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent parameter instead."
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/environmentVariableType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The environment variables to pass over to the script."
              }
            },
            "supportingScriptUris": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
              }
            },
            "subnetResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of subnet IDs to use for the container group. This is required if you want to run the deployment script in a private network. When using a private network, the `Storage File Data Privileged Contributor` role needs to be assigned to the user-assigned managed identity and the deployment principal needs to have permissions to list the storage account keys. Also, Shared-Keys must not be disabled on the used storage account [ref](https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/deployment-script-vnet)."
              }
            },
            "arguments": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
              }
            },
            "retentionInterval": {
              "type": "string",
              "defaultValue": "P1D",
              "metadata": {
                "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
              }
            },
            "runOnce": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "Always",
              "allowedValues": [
                "Always",
                "OnSuccess",
                "OnExpiration"
              ],
              "metadata": {
                "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
              }
            },
            "containerGroupName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the storage account to use for this deployment script. If none is provided, the deployment script uses a temporary, managed storage account."
              }
            },
            "timeout": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              },
              {
                "name": "subnetIds",
                "count": "[length(coalesce(parameters('subnetResourceIds'), createArray()))]",
                "input": {
                  "id": "[coalesce(parameters('subnetResourceIds'), createArray())[copyIndex('subnetIds')]]"
                }
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            },
            "containerSettings": {
              "containerGroupName": "[parameters('containerGroupName')]",
              "subnetIds": "[if(not(empty(coalesce(variables('subnetIds'), createArray()))), variables('subnetIds'), null())]"
            },
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null()), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
          },
          "resources": {
            "storageAccount": {
              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "subscriptionId": "[split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '////'), '/')[4]]",
              "name": "[last(split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), 'dummyAccount'), '/'))]"
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.resources-deploymentscript.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "deploymentScript": {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                "containerSettings": "[if(not(empty(variables('containerSettings'))), variables('containerSettings'), null())]",
                "storageAccountSettings": "[if(not(empty(parameters('storageAccountResourceId'))), if(not(empty(parameters('storageAccountResourceId'))), createObject('storageAccountKey', if(empty(parameters('subnetResourceIds')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '//'), '/')[2], split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), 'dummyAccount'), '/'))), '2023-01-01').keys[0].value, null()), 'storageAccountName', last(split(parameters('storageAccountResourceId'), '/'))), null()), null())]",
                "arguments": "[parameters('arguments')]",
                "environmentVariables": "[parameters('environmentVariables')]",
                "scriptContent": "[if(not(empty(parameters('scriptContent'))), parameters('scriptContent'), null())]",
                "primaryScriptUri": "[if(not(empty(parameters('primaryScriptUri'))), parameters('primaryScriptUri'), null())]",
                "supportingScriptUris": "[if(not(empty(parameters('supportingScriptUris'))), parameters('supportingScriptUris'), null())]",
                "cleanupPreference": "[parameters('cleanupPreference')]",
                "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                "retentionInterval": "[parameters('retentionInterval')]",
                "timeout": "[parameters('timeout')]"
              }
            },
            "deploymentScript_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "deploymentScript"
              ]
            },
            "deploymentScript_roleAssignments": {
              "copy": {
                "name": "deploymentScript_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "deploymentScript"
              ]
            },
            "deploymentScriptLogs": {
              "existing": true,
              "type": "Microsoft.Resources/deploymentScripts/logs",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "dependsOn": [
                "deploymentScript"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployment script."
              },
              "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the deployment script was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployment script."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('deploymentScript', '2023-08-01', 'full').location]"
            },
            "outputs": {
              "type": "object",
              "metadata": {
                "description": "The output of the deployment script."
              },
              "value": "[coalesce(tryGet(reference('deploymentScript'), 'outputs'), createObject())]"
            },
            "deploymentScriptLogs": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The logs of the deployment script."
              },
              "value": "[split(reference('deploymentScriptLogs').log, '\n')]"
            }
          }
        }
      },
      "dependsOn": [
        "containerApp",
        "cosmos",
        "managedIdentityModule"
      ]
    }
  }
}
